#!/bin/bash

# kurbeScript - Kubernetes Local Cluster Setup and Verification Script
# This script sets up a local Kubernetes cluster using Minikube and verifies its functionality

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install Minikube
install_minikube() {
    print_status "Installing Minikube..."
    
    # Detect OS and architecture
    OS=$(uname -s | tr '[:upper:]' '[:lower:]')
    ARCH=$(uname -m)
    
    case $ARCH in
        x86_64) ARCH="amd64" ;;
        aarch64) ARCH="arm64" ;;
        armv7l) ARCH="arm" ;;
    esac
    
    # Download and install Minikube
    curl -Lo minikube "https://storage.googleapis.com/minikube/releases/latest/minikube-${OS}-${ARCH}"
    chmod +x minikube
    sudo mv minikube /usr/local/bin/
    
    print_success "Minikube installed successfully"
}

# Function to install kubectl
install_kubectl() {
    print_status "Installing kubectl..."
    
    # Download kubectl
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    chmod +x kubectl
    sudo mv kubectl /usr/local/bin/
    
    print_success "kubectl installed successfully"
}

# Function to check and install dependencies
check_dependencies() {
    print_status "Checking dependencies..."
    
    # Check if Docker is installed
    if ! command_exists docker; then
        print_error "Docker is not installed. Please install Docker first."
        print_status "You can install Docker using: sudo apt-get update && sudo apt-get install docker.io"
        exit 1
    fi
    
    # Check if Minikube is installed
    if ! command_exists minikube; then
        print_warning "Minikube is not installed. Installing now..."
        install_minikube
    else
        print_success "Minikube is already installed"
    fi
    
    # Check if kubectl is installed
    if ! command_exists kubectl; then
        print_warning "kubectl is not installed. Installing now..."
        install_kubectl
    else
        print_success "kubectl is already installed"
    fi
    
    print_success "All dependencies are available"
}

# Function to start Minikube cluster
start_cluster() {
    print_status "Starting Kubernetes cluster with Minikube..."
    
    # Check if Minikube is already running
    if minikube status >/dev/null 2>&1; then
        print_warning "Minikube cluster is already running"
        return 0
    fi
    
    # Start Minikube with Docker driver
    minikube start --driver=docker --cpus=2 --memory=2g
    
    if [ $? -eq 0 ]; then
        print_success "Kubernetes cluster started successfully"
    else
        print_error "Failed to start Kubernetes cluster"
        exit 1
    fi
}

# Function to verify cluster is running
verify_cluster() {
    print_status "Verifying cluster status..."
    
    # Wait for cluster to be ready
    print_status "Waiting for cluster to be ready..."
    kubectl wait --for=condition=Ready nodes --all --timeout=300s
    
    # Get cluster info
    print_status "Cluster information:"
    kubectl cluster-info
    
    # Check if cluster info command was successful
    if [ $? -eq 0 ]; then
        print_success "Cluster is running and accessible"
    else
        print_error "Failed to get cluster information"
        exit 1
    fi
}

# Function to retrieve available pods
get_pods() {
    print_status "Retrieving available pods..."
    
    # Get pods from all namespaces
    echo -e "\n${BLUE}Pods in all namespaces:${NC}"
    kubectl get pods --all-namespaces
    
    # Get pods from default namespace
    echo -e "\n${BLUE}Pods in default namespace:${NC}"
    kubectl get pods
    
    # Get nodes
    echo -e "\n${BLUE}Available nodes:${NC}"
    kubectl get nodes
    
    # Get services
    echo -e "\n${BLUE}Available services:${NC}"
    kubectl get services --all-namespaces
}

# Function to display cluster status
display_status() {
    print_status "Current cluster status:"
    echo -e "\n${BLUE}Minikube Status:${NC}"
    minikube status
    
    echo -e "\n${BLUE}Kubectl Version:${NC}"
    kubectl version --client --short
    
    echo -e "\n${BLUE}Cluster Version:${NC}"
    kubectl version --short 2>/dev/null || echo "Cluster version information unavailable"
}

# Function to provide helpful information
show_help() {
    echo -e "\n${GREEN}Kubernetes cluster is now ready!${NC}"
    echo -e "\n${BLUE}Useful commands:${NC}"
    echo "  kubectl get nodes                    - List all nodes"
    echo "  kubectl get pods --all-namespaces   - List all pods"
    echo "  kubectl get services                 - List all services"
    echo "  kubectl cluster-info                 - Show cluster information"
    echo "  minikube dashboard                   - Open Kubernetes dashboard"
    echo "  minikube stop                        - Stop the cluster"
    echo "  minikube delete                      - Delete the cluster"
    echo ""
    echo -e "${BLUE}To access the Kubernetes dashboard:${NC}"
    echo "  minikube dashboard"
    echo ""
    echo -e "${BLUE}To stop the cluster when done:${NC}"
    echo "  minikube stop"
}

# Main execution
main() {
    echo -e "${GREEN}======================================${NC}"
    echo -e "${GREEN}  Kubernetes Local Cluster Setup     ${NC}"
    echo -e "${GREEN}======================================${NC}"
    echo ""
    
    # Check dependencies
    check_dependencies
    
    # Start the cluster
    start_cluster
    
    # Verify cluster is running
    verify_cluster
    
    # Retrieve available pods
    get_pods
    
    # Display status
    display_status
    
    # Show helpful information
    show_help
    
    print_success "Script execution completed successfully!"
}

# Run the main function
main "$@"
