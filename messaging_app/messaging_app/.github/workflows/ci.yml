name: CI Pipeline

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_messaging_app
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y default-libmysqlclient-dev build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for MySQL to be ready
      run: |
        until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot --silent; do
          echo 'Waiting for MySQL...'
          sleep 1
        done

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=mysql://test_user:test_password@127.0.0.1:3306/test_messaging_app" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DEBUG=False" >> $GITHUB_ENV

    - name: Run Django migrations
      working-directory: ./messaging_app
      run: |
        python manage.py check_db --settings=messaging_app.settings_test
        python manage.py migrate --settings=messaging_app.settings_test

    - name: Run Django tests
      working-directory: ./messaging_app
      run: |
        python manage.py test --settings=messaging_app.settings_test --verbosity=2

    - name: Run pytest tests
      working-directory: ./messaging_app
      run: |
        pytest --tb=short --settings=messaging_app.settings_test

    - name: Check code formatting with Black
      working-directory: ./messaging_app
      run: |
        black --check --diff .

    - name: Run Flake8 linting
      working-directory: ./messaging_app
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Check for security vulnerabilities
      run: |
        safety check -r requirements.txt