{
  "info": {
    "name": "Messaging App API Tests",
    "description": "Comprehensive testing for authentication and messaging endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User 1",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser1\",\n  \"password\": \"testpass123\",\n  \"email\": \"test1@example.com\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User One\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/register/",
              "host": ["{{base_url}}"],
              "path": ["api", "register", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User registration successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data and tokens\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user).to.exist;",
                  "    pm.expect(jsonData.access).to.exist;",
                  "    pm.expect(jsonData.refresh).to.exist;",
                  "    pm.collectionVariables.set(\"user1_id\", jsonData.user.user_id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Register User 2",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser2\",\n  \"password\": \"testpass456\",\n  \"email\": \"test2@example.com\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User Two\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/register/",
              "host": ["{{base_url}}"],
              "path": ["api", "register", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User 2 registration successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "pm.collectionVariables.set(\"user2_id\", jsonData.user.user_id);"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User 1 - Get JWT Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser1\",\n  \"password\": \"testpass123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/token/",
              "host": ["{{base_url}}"],
              "path": ["api", "token", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has access token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.access).to.exist;",
                  "    pm.expect(jsonData.refresh).to.exist;",
                  "    pm.collectionVariables.set(\"access_token\", jsonData.access);",
                  "    pm.collectionVariables.set(\"refresh_token\", jsonData.refresh);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User 2 - Get JWT Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser2\",\n  \"password\": \"testpass456\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/token/",
              "host": ["{{base_url}}"],
              "path": ["api", "token", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "pm.collectionVariables.set(\"user2_access_token\", jsonData.access);"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh JWT Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/token/refresh/",
              "host": ["{{base_url}}"],
              "path": ["api", "token", "refresh", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Token refresh successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"New access token received\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.access).to.exist;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Conversations",
      "item": [
        {
          "name": "Create Conversation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"participants\": [\"{{user1_id}}\", \"{{user2_id}}\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/conversations/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Conversation created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains conversation data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.conversation_id).to.exist;",
                  "    pm.expect(jsonData.participants).to.be.an('array');",
                  "    pm.expect(jsonData.participants).to.have.lengthOf(2);",
                  "    pm.collectionVariables.set(\"conversation_id\", jsonData.conversation_id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User's Conversations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/conversations/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Conversations retrieved successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains conversations array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.be.an('array');",
                  "    pm.expect(jsonData.results.length).to.be.at.least(1);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Unauthorized Access Test - No Token",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/conversations/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Unauthorized access blocked\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message present\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.detail).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalid Conversation Creation - Single Participant",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"participants\": [\"{{user1_id}}\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/conversations/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid conversation creation rejected\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message about participants\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.include('at least two participants');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Messages",
      "item": [
        {
          "name": "Send Message to Conversation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"conversation\": \"{{conversation_id}}\",\n  \"message_body\": \"Hello! This is my first test message.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/conversations/{{conversation_id}}/messages/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", "{{conversation_id}}", "messages", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Message sent successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Message data is correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message_id).to.exist;",
                  "    pm.expect(jsonData.message_body).to.equal('Hello! This is my first test message.');",
                  "    pm.expect(jsonData.sender).to.exist;",
                  "    pm.collectionVariables.set(\"message_id\", jsonData.message_id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Send Second Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{user2_access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"conversation\": \"{{conversation_id}}\",\n  \"message_body\": \"Hi there! This is a reply from user 2.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/conversations/{{conversation_id}}/messages/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", "{{conversation_id}}", "messages", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Second message sent successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Messages in Conversation",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/conversations/{{conversation_id}}/messages/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", "{{conversation_id}}", "messages", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Messages retrieved successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Messages array contains our messages\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.be.an('array');",
                  "    pm.expect(jsonData.results.length).to.be.at.least(2);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Search Messages",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/conversations/{{conversation_id}}/messages/?search=test",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", "{{conversation_id}}", "messages", ""],
              "query": [
                {
                  "key": "search",
                  "value": "test"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Search results returned\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search results contain expected message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.be.an('array');",
                  "    var hasTestMessage = jsonData.results.some(msg => msg.message_body.includes('test'));",
                  "    pm.expect(hasTestMessage).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Filter Messages by Sender",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/conversations/{{conversation_id}}/messages/?sender={{user1_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", "{{conversation_id}}", "messages", ""],
              "query": [
                {
                  "key": "sender",
                  "value": "{{user1_id}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Filtered messages returned\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All messages are from specified sender\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var user1_id = pm.collectionVariables.get('user1_id');",
                  "    jsonData.results.forEach(function(message) {",
                  "        pm.expect(message.sender.user_id).to.equal(user1_id);",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Unauthorized Message Access",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/conversations/{{conversation_id}}/messages/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", "{{conversation_id}}", "messages", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Unauthorized message access blocked\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Advanced Filtering Tests",
      "item": [
        {
          "name": "Filter Messages - Last 24 Hours",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/conversations/{{conversation_id}}/messages/?last_24h=true",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", "{{conversation_id}}", "messages", ""],
              "query": [
                {
                  "key": "last_24h",
                  "value": "true"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"24h filter works\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Results contain recent messages\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Pagination Test",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/conversations/{{conversation_id}}/messages/?page=1&page_size=1",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", "{{conversation_id}}", "messages", ""],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "page_size",
                  "value": "1"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Pagination works\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Page contains exactly one result\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.results).to.have.lengthOf(1);",
                  "    pm.expect(jsonData.count).to.be.at.least(1);",
                  "    pm.expect(jsonData.next).to.exist;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user2_access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "conversation_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "message_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user1_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user2_id",
      "value": "",
      "type": "string"
    }
  ]
}